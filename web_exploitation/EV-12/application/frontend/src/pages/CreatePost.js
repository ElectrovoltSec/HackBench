import React, { useEffect, useRef, useState } from 'react';
import { 
  Container, 
  Box, 
  TextField, 
  Button, 
  Typography,
  Switch,
  FormControlLabel,
  Paper,
  Tabs,
  Tab
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import { useNotification } from '../contexts/NotificationContext';
import api from '../services/api';
import { marked } from 'marked';
import DOMPurify from 'dompurify';

const CreatePost = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { showNotification } = useNotification();
  const editorRef = useRef();
  const [editorInstance, setEditorInstance] = useState(null);
  
  const queryParams = new URLSearchParams(location.search);
  const textParam = queryParams.get('text');
  
  const [formData, setFormData] = useState({
    content: textParam || '',
    isPrivate: false
  });
  const [loading, setLoading] = useState(false);
  const [tab, setTab] = useState(0);

  useEffect(() => {
    if (window.CKEDITOR && editorRef.current) {
      const config = {
        extraAllowedContent: 'style',
        toolbar: [
          { name: 'basicstyles', items: ['Bold', 'Italic'] },
          { name: 'paragraph', items: ['NumberedList', 'BulletedList'] }
        ],
        removePlugins: 'elementspath',
        resize_enabled: false
      };

      const editor = window.CKEDITOR.replace(editorRef.current, config);

      setEditorInstance(editor);

      if (textParam) {
        editor.setData(textParam);
      }

      editor.on('change', function() {
        const data = editor.getData();
        setFormData(prev => ({ ...prev, content: data }));
      });

      return () => {
        if (editor) {
          editor.destroy();
        }
      };
    }
  }, [textParam]);

  marked.setOptions({
    breaks: true,
    gfm: true,
    headerIds: false,
    mangle: false
  });

  const renderMarkdown = (content) => {
    const rawHtml = marked.parse(content);
    return DOMPurify.sanitize(rawHtml);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const content = editorInstance ? editorInstance.getData() : formData.content;
    
    if (!content || !content.trim()) {
      showNotification('Post content cannot be empty', 'error');
      return;
    }

    setLoading(true);
    try {
      await api.post('/api/posts', {
        content,
        private: formData.isPrivate
      });
      showNotification('Post created successfully', 'success');
      navigate('/');
    } catch (error) {
      showNotification(error.response?.data?.message || 'Failed to create post', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4 }}>
        <Paper sx={{ p: 3 }}>
          <Typography variant="h5" component="h1" gutterBottom>
            Create Post
          </Typography>
          <Tabs value={tab} onChange={(e, newValue) => setTab(newValue)} sx={{ mb: 2 }}>
            <Tab label="Write" />
            <Tab label="Preview" />
          </Tabs>
          <Box component="form" onSubmit={handleSubmit}>
            {tab === 0 ? (
              <textarea ref={editorRef} />
            ) : (
              <Box sx={{ 
                minHeight: '200px', 
                p: 2, 
                border: 1, 
                borderColor: 'grey.300',
                borderRadius: 1,
                '& a': { color: 'primary.main' },
                '& img': { maxWidth: '100%', height: 'auto' },
                '& pre': { 
                  bgcolor: 'grey.100', 
                  p: 2, 
                  borderRadius: 1,
                  overflow: 'auto'
                },
                '& code': { 
                  bgcolor: 'grey.100', 
                  p: 0.5, 
                  borderRadius: 0.5 
                }
              }}>
                <div 
                  dangerouslySetInnerHTML={{ 
                    __html: renderMarkdown(DOMPurify.sanitize(formData.content)) 
                  }} 
                />
              </Box>
            )}
            <FormControlLabel
              control={
                <Switch
                  checked={formData.isPrivate}
                  onChange={(e) => setFormData({ ...formData, isPrivate: e.target.checked })}
                  disabled={loading}
                />
              }
              label="Private Post"
            />
            <Box sx={{ mt: 2 }}>
              <Button
                type="submit"
                variant="contained"
                fullWidth
                disabled={loading}
              >
                {loading ? 'Creating...' : 'Create Post'}
              </Button>
            </Box>
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default CreatePost; 