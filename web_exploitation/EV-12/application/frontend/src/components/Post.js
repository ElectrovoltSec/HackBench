import React, { useState } from 'react';
import { Card, CardContent, CardHeader, Typography, IconButton, Box, Link, Button } from '@mui/material';
import { Delete as DeleteIcon, Share as ShareIcon } from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { Link as RouterLink } from 'react-router-dom';
import { formatDistance } from 'date-fns';
import { marked } from 'marked';
import DOMPurify from 'dompurify';
import { generateRepostUrl } from '../utils/shareUtils';

const Post = ({ post, onDelete }) => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const textParam = queryParams.get('text');
  const sanitizedContent = textParam ? DOMPurify.sanitize(textParam) : post.content;
  const isAuthor = user?.id === post.user.id;

  // Configure marked options
  marked.setOptions({
    breaks: true,
    gfm: true,
    headerIds: false,
    mangle: false
  });

  const handleUserClick = () => {
    navigate(`/profile/${post.user.username}`);
  };

  const handleDelete = () => {
    if (window.confirm('Are you sure you want to delete this post?')) {
      onDelete(post.id);
    }
  };

  const renderMarkdown = (content) => {
    // First convert markdown to HTML
    const rawHtml = marked.parse(content);
    // Then sanitize the HTML with default DOMPurify settings
    return DOMPurify.sanitize(rawHtml);
  };

  return (
    <Card sx={{ mb: 2 }}>
      <CardHeader
        title={
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Link
              component={RouterLink}
              to={`/profile/${post.user.username}`}
              color="inherit"
              underline="hover"
            >
              <Typography variant="h6">{post.user.username}</Typography>
            </Link>
            <Link
              component={RouterLink}
              to={`/post/${post.id}`}
              color="textSecondary"
              underline="hover"
            >
              <Typography variant="body2">
                {formatDistance(new Date(post.createdAt), new Date(), { addSuffix: true })}
              </Typography>
            </Link>
          </Box>
        }
        subheader={new Date(post.createdAt).toLocaleDateString()}
        action={
          <Box>
            <Button
              size="small"
              startIcon={<ShareIcon />}
              onClick={() => {
                const shareUrl = generateRepostUrl(post.content);
                navigator.clipboard.writeText(shareUrl);
                alert('Repost URL copied to clipboard!');
              }}
              sx={{ mr: 1 }}
            >
              Repost
            </Button>
            {isAuthor && (
              <IconButton onClick={handleDelete} size="small">
                <DeleteIcon />
              </IconButton>
            )}
          </Box>
        }
      />
      <CardContent>
        <Box sx={{ 
          '& a': { color: 'primary.main' },
          '& img': { maxWidth: '100%', height: 'auto' },
          '& pre': { 
            bgcolor: 'grey.100', 
            p: 2, 
            borderRadius: 1,
            overflow: 'auto'
          },
          '& code': { 
            bgcolor: 'grey.100', 
            p: 0.5, 
            borderRadius: 0.5 
          }
        }}>
          <div 
            dangerouslySetInnerHTML={{ 
              __html: renderMarkdown(sanitizedContent) 
            }} 
          />
        </Box>
        {post.isPrivate && (
          <Typography variant="caption" color="text.secondary">
            Private post
          </Typography>
        )}
      </CardContent>
    </Card>
  );
};

export default Post; 