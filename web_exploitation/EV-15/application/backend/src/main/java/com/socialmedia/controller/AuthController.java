package com.socialmedia.controller;

import com.socialmedia.dto.*;
import com.socialmedia.service.AuthService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping(value = "/register", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> register(@RequestBody RegisterRequest request, HttpServletResponse response) {
        try {
            UserDto userDto = authService.register(request);

            String token = authService.generateToken(userDto);
            AuthResponse authResponse = new AuthResponse(token, userDto);
            addAuthCookie(response, token);
            
            return ResponseEntity.ok(authResponse);
        } catch (RuntimeException e) {
            return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(new ErrorResponse(e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ErrorResponse("An error occurred during registration"));
        }
    }

    @PostMapping(value = "/login", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AuthResponse> login(@RequestBody LoginRequest request, HttpServletResponse response) {
        UserDto userDto = authService.login(request);
        String token = authService.generateToken(userDto);
        
        // Set token in cookie
        addAuthCookie(response, token);
        
        // Also include token in response body
        AuthResponse authResponse = new AuthResponse(token, userDto);
        return ResponseEntity.ok()
            .header("Access-Control-Allow-Credentials", "true")
            .body(authResponse);
    }

    @PostMapping("/logout")
    public ResponseEntity<Void> logout(HttpServletResponse response) {
        String cookieHeader = "jwt=; Path=/; Max-Age=0; HttpOnly; Secure; SameSite=None";
        response.setHeader("Set-Cookie", cookieHeader);
        return ResponseEntity.ok().build();
    }

    private void addAuthCookie(HttpServletResponse response, String token) {
        Cookie cookie = new Cookie("jwt", token);
        cookie.setMaxAge(24 * 60 * 60); // 24 hours
        cookie.setPath("/");
        cookie.setHttpOnly(true);
        cookie.setSecure(true);
        
        String cookieHeader = String.format("%s=%s; Path=%s; Max-Age=%d; HttpOnly; SameSite=Lax",
            cookie.getName(), 
            cookie.getValue(), 
            cookie.getPath(),
            cookie.getMaxAge()
        );
        response.setHeader("Set-Cookie", cookieHeader);
        
        // Add CORS headers
        response.setHeader("Access-Control-Allow-Credentials", "true");
        response.setHeader("Access-Control-Allow-Origin", "http://localhost:3000");
    }
} 