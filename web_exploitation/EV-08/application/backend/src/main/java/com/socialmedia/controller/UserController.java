package com.socialmedia.controller;

import com.socialmedia.dto.PostResponse;
import com.socialmedia.dto.UserDto;
import com.socialmedia.dto.ErrorResponse;
import com.socialmedia.service.PostService;
import com.socialmedia.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import com.socialmedia.payload.request.PasswordUpdateRequest;
import com.socialmedia.dto.MessageResponse;
import com.socialmedia.model.User;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;
    private final PostService postService;

    @GetMapping("/me")
    public ResponseEntity<UserDto> getCurrentUser() {
        return ResponseEntity.ok(userService.getCurrentUserDto());
    }

    @GetMapping("/{username}")
    public ResponseEntity<UserDto> getUserProfile(@PathVariable String username) {
        return ResponseEntity.ok(userService.getUserProfile(username));
    }

    @GetMapping("/{username}/posts")
    public ResponseEntity<List<PostResponse>> getUserPosts(@PathVariable String username) {
        return ResponseEntity.ok(postService.getUserPosts(username));
    }

    @GetMapping("/{username}/followers")
    public ResponseEntity<List<UserDto>> getUserFollowers(@PathVariable String username) {
        return ResponseEntity.ok(userService.getFollowers(username));
    }

    @GetMapping("/{username}/following")
    public ResponseEntity<List<UserDto>> getUserFollowing(@PathVariable String username) {
        return ResponseEntity.ok(userService.getFollowing(username));
    }

    @PutMapping(
        value = "/profile",
        consumes = {
            MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_FORM_URLENCODED_VALUE
        }
    )
    public ResponseEntity<UserDto> updateProfile(@RequestBody UserDto userDto) {
        return ResponseEntity.ok(userService.updateProfile(userDto));
    }

    @GetMapping("/search")
    public ResponseEntity<List<UserDto>> searchUsers(@RequestParam String query) {
        return ResponseEntity.ok(userService.searchUsers(query));
    }

    @PostMapping(
        value = "/{username}/follow",
        consumes = {
            MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_FORM_URLENCODED_VALUE
        }
    )
    public ResponseEntity<?> followUser(@PathVariable String username) {
        userService.sendFollowRequest(username);
        return ResponseEntity.ok().build();
    }

    @PostMapping(
        value = "/{username}/unfollow",
        consumes = {
            MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_FORM_URLENCODED_VALUE
        }
    )
    public ResponseEntity<?> unfollowUser(@PathVariable String username) {
        userService.unfollowUser(username);
        return ResponseEntity.ok().build();
    }

    @PostMapping(
        value = "/{username}/accept-follow",
        consumes = {
            MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_FORM_URLENCODED_VALUE
        }
    )
    public ResponseEntity<?> acceptFollowRequest(@PathVariable String username) {
        userService.acceptFollowRequest(username);
        return ResponseEntity.ok().build();
    }

    @PostMapping(
        value = "/{userId}/password",
        consumes = {
            MediaType.APPLICATION_JSON_VALUE,
            MediaType.APPLICATION_FORM_URLENCODED_VALUE
        }
    )
    public ResponseEntity<Void> updatePassword(
            @PathVariable Long userId,
            @RequestParam(required = false) String newPassword,
            @RequestBody(required = false) Map<String, String> requestBody) {
        
        // Get password from either form data or JSON body
        String password = newPassword != null ? newPassword : requestBody.get("newPassword");
        if (password == null) {
            throw new RuntimeException("New password is required");
        }
        
        userService.updatePassword(userId, password);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/{username}/follow-requests")
    public ResponseEntity<List<UserDto>> getFollowRequests(@PathVariable String username) {
        return ResponseEntity.ok(userService.getFollowRequests(username));
    }
} 