const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const session = require('express-session');
const cookieParser = require('cookie-parser');

const app = express();
app.use(express.json());
app.use(cookieParser());

app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false
}));

mongoose.connect(process.env.MONGODB_URI);

const userSchema = new mongoose.Schema({
    username: { type: String, unique: true },
    password: String,
    passwordreset: String,
    isAdmin: { type: Boolean, default: false }
});

const contactSchema = new mongoose.Schema({
    userId: mongoose.Schema.Types.ObjectId,
    name: String,
    phone: String
});

const secretSchema = new mongoose.Schema({
    key: String,
    value: String
});

const User = mongoose.model('User', userSchema);
const Contact = mongoose.model('Contact', contactSchema);
const Secret = mongoose.model('Secret', secretSchema);

const authenticateToken = (req, res, next) => {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ error: 'Access denied' });

    try {
        const verified = jwt.verify(token, process.env.JWT_SECRET);
        req.user = verified;
        next();
    } catch (err) {
        res.status(401).json({ error: 'Invalid token' });
    }
};

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

app.post('/register', async (req, res) => {
    try {
        const existingUser = await User.findOne({ username: req.body.username });
        if (existingUser) {
            return res.status(400).json({ error: 'Username already registered' });
        }

        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const user = new User({
            username: req.body.username,
            password: hashedPassword
        });
        await user.save();
        res.status(201).json({ message: 'User created' });
    } catch (error) {
        res.status(400).json({ error: 'Registration failed' });
    }
});

app.post('/login', async (req, res) => {
    try {
        const user = await User.findOne({ username: req.body.username });
        if (!user) return res.status(400).json({ error: 'User not found' });

        const validPassword = await bcrypt.compare(req.body.password, user.password);
        if (!validPassword) return res.status(400).json({ error: 'Invalid password' });

        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET);
        
        req.session.userId = user._id;
        req.session.username = user.username;
        
        res.cookie('token', token, { httpOnly: true });
        res.json({ message: 'Logged in successfully' });
    } catch (error) {
        res.status(400).json({ error: 'Login failed' });
    }
});

app.post('/logout', (req, res) => {
    req.session.destroy();
    res.clearCookie('token');
    res.json({ message: 'Logged out successfully' });
});

app.post('/contacts', authenticateToken, async (req, res) => {
    const contact = new Contact({
        userId: req.user._id,
        name: req.body.name,
        phone: req.body.phone
    });
    await contact.save();
    res.status(201).json(contact);
});

app.get('/contacts', authenticateToken, async (req, res) => {
    const contacts = await Contact.find({ userId: req.user._id });
    res.json(contacts);
});

app.delete('/contacts/:id', authenticateToken, async (req, res) => {
    await Contact.deleteOne({ _id: req.params.id, userId: req.user._id });
    res.json({ message: 'Contact deleted' });
});

function isStrongPassword(password) {
    const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
    return strongPasswordRegex.test(password);
}

function generateSecurePassword() {
    const length = 10;
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
    let password = '';
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        password += charset[randomIndex];
    }
    if (!/[A-Z]/.test(password)) password = 'A' + password.slice(1);
    if (!/[a-z]/.test(password)) password = password.slice(0, -1) + 'a';
    if (!/[0-9]/.test(password)) password = password.slice(0, -2) + '1';
    return password;
}

app.post('/forgot-password', async (req, res) => {
    try {
        const { token } = req.body;
        const user = await User.findOne({ 'passwordreset': token });
        
        if (!user) {
            return res.status(404).json({ error: 'Invalid token' });
        }

        const newPassword = generateSecurePassword();
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        
        user.password = hashedPassword;
        user.passwordreset = null;
        await user.save();

        res.json({ 
            message: 'Password has been reset',
            newPassword: newPassword 
        });
    } catch (error) {
        res.status(400).json({ error: 'Invalid token' });
    }
});

app.post('/request-reset', async (req, res) => {
    try {
        const { username } = req.body;
        const user = await User.findOne({ username });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const resetToken = Math.random().toString(36).substring(2, 15);
        
        user.passwordreset = resetToken;
        await user.save();

        res.json({ message: 'Password reset token generated' });
    } catch (error) {
        res.status(400).json({ error: 'Failed to generate reset token' });
    }
});

app.listen(3000, async () => {
    console.log('Server running on port 3000');
    
    try {
        const adminExists = await User.findOne({ username: 'admin' });
        if (!adminExists) {
            const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
            const admin = new User({
                username: 'admin',
                password: hashedPassword,
                isAdmin: true,
                passwordreset: Math.random().toString(36).substring(2, 15)
            });
            await admin.save();

            const contact = new Contact({
                userId: admin._id,
                name: 'Secret Flag',
                phone: process.env.FLAG
            });
            await contact.save();
        }
    } catch (error) {
        console.error('Error creating admin:', error);
    }
}); 