@extends('layouts.app')

@section('content')
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>{{ $report->title }}</h2>
            <div>
                <a href="{{ route('reports.download', $report->id) }}" class="btn btn-success">Download Sanitized CSV</a>
                <a href="{{ route('reports.index') }}" class="btn btn-secondary">Back to Reports</a>
            </div>
        </div>
        <div class="card-body">
            @if($report->description)
                <div class="mb-4">
                    <h5>Description:</h5>
                    <p>{{ $report->description }}</p>
                </div>
            @endif
            
            <div class="row mb-4">
                <div class="col-md-6">
                    <h5>Report Details:</h5>
                    <ul class="list-group">
                        <li class="list-group-item"><strong>Chart Type:</strong> {{ ucfirst($report->chart_type) }}</li>
                        <li class="list-group-item"><strong>X-Axis Field:</strong> {{ $report->x_axis }}</li>
                        <li class="list-group-item"><strong>Y-Axis Field:</strong> {{ $report->y_axis }}</li>
                        <li class="list-group-item"><strong>Masked Fields:</strong> {{ $report->sensitive_fields }}</li>
                        <li class="list-group-item"><strong>Created:</strong> {{ $report->created_at->format('Y-m-d H:i') }}</li>
                    </ul>
                </div>
            </div>
            
            <div class="chart-container" style="position: relative; height:60vh; width:100%">
                <canvas id="reportChart"></canvas>
            </div>
        </div>
    </div>
@endsection

@section('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const ctx = document.getElementById('reportChart').getContext('2d');
        const chartData = @json($csvData);
        const chartType = '{{ $report->chart_type }}';
        
        // Extract x and y values
        const labels = chartData.map(item => item.x);
        const data = chartData.map(item => item.y);
        
        // Configure chart based on type
        let chartConfig = {};
        
        if (chartType === 'pie') {
            // Generate random colors for pie chart
            const backgroundColors = labels.map(() => {
                const r = Math.floor(Math.random() * 255);
                const g = Math.floor(Math.random() * 255);
                const b = Math.floor(Math.random() * 255);
                return `rgba(${r}, ${g}, ${b}, 0.7)`;
            });
            
            chartConfig = {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        title: {
                            display: true,
                            text: '{{ $report->title }}'
                        }
                    }
                }
            };
        } else if (chartType === 'scatter') {
            // Format data for scatter plot
            const scatterData = chartData.map(item => ({
                x: parseFloat(item.x) || 0,
                y: parseFloat(item.y) || 0
            }));
            
            chartConfig = {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: '{{ $report->title }}',
                        data: scatterData,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: '{{ $report->x_axis }}'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: '{{ $report->y_axis }}'
                            }
                        }
                    }
                }
            };
        } else {
            // Bar or line chart
            chartConfig = {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: [{
                        label: '{{ $report->title }}',
                        data: data,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '{{ $report->y_axis }}'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: '{{ $report->x_axis }}'
                            }
                        }
                    }
                }
            };
        }
        
        new Chart(ctx, chartConfig);
    });
</script>
@endsection 