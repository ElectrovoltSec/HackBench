<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreReportRequest;
use App\Models\Report;
use App\Services\CsvSanitizationService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;

class ReportController extends Controller
{
    protected $csvService;

    public function __construct(CsvSanitizationService $csvService)
    {
        $this->csvService = $csvService;
    }

    public function index()
    {
        $reports = Report::latest()->get();
        return view('reports.index', compact('reports'));
    }

    public function create()
    {
        return view('reports.create');
    }

    public function store(StoreReportRequest $request)
    {
        // Process the validated data
        $data = $request->validated();
        
        // Store and sanitize the CSV file
        $fileInfo = $this->csvService->sanitizeAndStore($request->file('csv_file'), $data['sensitive_fields']);
        
        // Create report record
        $report = new Report();
        $report->title = $data['title'];
        $report->description = $data['description'] ?? null;
        $report->original_file = $fileInfo['original_path'];
        $report->sanitized_file = $fileInfo['sanitized_path'];
        $report->sensitive_fields = $data['sensitive_fields'];
        $report->chart_type = $data['chart_type'];
        $report->x_axis = $data['x_axis'];
        $report->y_axis = $data['y_axis'];
        $report->save();
        
        return redirect()->route('reports.show', $report->id)
            ->with('success', 'Report created successfully.');
    }

    public function show($id)
    {
        $report = Report::findOrFail($id);
        $csvData = $this->csvService->getChartData($report);
        
        return view('reports.show', compact('report', 'csvData'));
    }

    public function download($id)
    {
        $report = Report::findOrFail($id);
        return Storage::download($report->sanitized_file, 'sanitized_report.csv');
    }

    public function destroy($id)
    {
        $report = Report::findOrFail($id);
        
        Storage::delete([$report->original_file, $report->sanitized_file]);
        $report->delete();
        
        return redirect()->route('reports.index')
            ->with('success', 'Report deleted successfully');
    }
    
    public function listFiles()
    {
        // List all files in the storage directories
        $originalFiles = Storage::files('original_reports');
        $sanitizedFiles = Storage::files('sanitized_reports');
        
        // Get file details
        $files = [];
        
        foreach ($originalFiles as $file) {
            $files[] = [
                'name' => basename($file),
                'path' => $file,
                'size' => Storage::size($file),
                'last_modified' => date('Y-m-d H:i:s', Storage::lastModified($file)),
                'type' => 'original'
            ];
        }
        
        foreach ($sanitizedFiles as $file) {
            $files[] = [
                'name' => basename($file),
                'path' => $file,
                'size' => Storage::size($file),
                'last_modified' => date('Y-m-d H:i:s', Storage::lastModified($file)),
                'type' => 'sanitized'
            ];
        }
        
        return view('reports.files', compact('files'));
    }

    public function downloadFile($path)
    {
        if (Storage::exists($path)) {
            return Storage::download($path, basename($path));
        }
        
        return back()->with('error', 'File not found.');
    }
} 