const express = require('express');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.APP_PORT || 3000;
const db = new sqlite3.Database(':memory:');

// Initialize database
db.serialize(() => {
    db.run(`CREATE TABLE comments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        page_id TEXT NOT NULL,
        content TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
});

// Middleware
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname)));

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'example.html'));
});

app.get('/render', (req, res) => {
    res.sendFile(path.join(__dirname, 'render.html'));
});

app.get('/api/comments/:pageId', (req, res) => {
    const { pageId } = req.params;
    
    db.all('SELECT * FROM comments WHERE page_id = ? ORDER BY created_at DESC', [pageId], (err, rows) => {
        if (err) {
            return res.status(500).json({ error: 'Database error' });
        }
        res.json(rows);
    });
});

app.post('/api/comments/:pageId', (req, res) => {
    const { pageId } = req.params;
    const { content } = req.body;
    
    if (!content) {
        return res.status(400).json({ error: 'Content is required' });
    }

    db.run('INSERT INTO comments (page_id, content) VALUES (?, ?)', [pageId, content], function(err) {
        if (err) {
            return res.status(500).json({ error: 'Database error' });
        }
        res.json({ id: this.lastID });
    });
});

app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
}); 